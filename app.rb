#=====================
# APP SETUP 
#=====================
require 'sinatra'
require 'faraday'
require 'pry'
require 'yaml'

set :opts, YAML::load(File.open('settings.yml'))

def user
  settings.opts['sample_user']
end

def mcloud
  Faraday.new(:url => settings.opts['mcloud_url'], :ssl => {:verify => false}) do |faraday|
    faraday.request  :url_encoded
    faraday.response :logger
    faraday.adapter  Faraday.default_adapter
  end
end

#=====================
# MAIN APP LOGIC 
#=====================
get '/' do
  "
  <html>
    <head>
      <title>SSO Example</title>
    </head>
    <body>
      Single Sign-on
      <br/><a href='/method1'>Method 1</a>
      <br/><a href='/method2'>Method 2</a>
    </body>
  </html>
  "
end

# Method 1 returns a hidden form containing the user's credentials
# plus an authenticity token generated by mCloud Dashboard. This
# form is then set-up to autosubmit after two seconds of loading
# in the user's browser. An important thing to ensure in this method
# is that all communication must be done via SSL so as not to
# expose the user's credentials through a man-in-the-middle attack
get '/method1' do
  # Request the login screen for the dashboard
  result = mcloud.get('/')

  authenticity_token = result.body.match(/authenticity.+value\="(\S+)"/)[1]

  # Return HTML with self-submitting form
  <<-EOF
  <html>
    <head>
      <title>SSO Example</title>
    </head>
    <body>
    You will be redirected to mCloud in 2 seconds...
      <form name="sso_form" action="#{ mcloud.build_url('/') }" method="post">
        <input name="username" type="hidden" value="#{ user['username'] }">
        <input name="password" type="hidden" value="#{ user['password'] }">
        <input name="authenticity_token" type="hidden" value="#{ authenticity_token }">
      </form>
      <script>
        setTimeout("document.sso_form.submit();",2000);
      </script>
    </body>
  </html>
  EOF
end

# Method 2 logs in on behalf of the user and then passes on the cookies 
# returned by mCloud Dashboard to the browser. IMPORTANT: Because of cookie
# security measures imposed by modern browsers, this method is only possible
# if this server and mCloud reside in the same domain. For more information,
# please see http://goo.gl/vFG5T
get '/method2' do
  # Request the login screen for the dashboard
  result = mcloud.get('/')

  authenticity_token = result.body.match(/authenticity.+value\="(\S+)"/)[1]
  
  # Post the user's credentials to mCloud
  result = mcloud.post('/') do |request|
    request.body = {
      username: user['username'],
      password: user['password'],
      authenticity_token: authenticity_token
    }
  end
  
  # Get the session id returned by mCloud
  session_key = '_mcloud_web_client_session'
  session_val = result.headers['set-cookie'].match(/#{ session_key }=(\S+);/)[1]
  
  # This may not apply to all types of URL patterns. The basic idea is to get 
  # the top level domain prefixed by a dot. (e.g. .companycloud.com)
  tld = mcloud.url_prefix.host.match(/\.[\w-]+\.+\w+$/)
  
  # Push the cookie to the browser and then redirect it. Note how
  # we're telling the browser which domains and path this cookie applies to.
  response['set-cookie'] = "#{ session_key }=#{ session_val }; Domain=#{ tld }; Path=/; HttpOnly" 
  response.redirect mcloud.url_prefix.to_s
end